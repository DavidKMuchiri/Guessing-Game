{"version":3,"sources":["Components/InputPlace.js","game-code/Back-end.js","game-code/game-control.js","Components/ErrorBoundary.js","Components/Buttons.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Input","style","valueChange","reset","type","placeholder","visibility","onClick","onChange","questions_storage","input","questions_set","answers","step","step_in_guessing","secret_number","guess_counter","guesses","instruction1","instruction2","btnText","inputVisibility","stopVisibility","timesPlayed","instructions","set","run_QandA","user_answer","length","all_questions","finalArray","q_amount","counter","old_indexes","new_index","limit","Math","floor","random","alert","includes","push","questions_generator","isNaN","Number","shift","all_answers","sum_of_answers","finalNumber","number_of_answers","randomNumber1","randomNumber2","randomNumber3","randomNumber4","abs","trunc","toString","secret_number_generator","steps_to_guessing","run_guessing","unshift","game_reset","choice","game_control","user_input","ErrorBoundary","props","state","hasError","error","info","this","setState","className","children","Component","Buttons","gamecontrol","gamestop","text","stopvisibility","App","gameControl","gameStop","onValueChange","event","target","value","resetInput","previousInstructions","setTimeout","bind","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAgBeA,EAbD,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MAEjC,OACI,8BACI,uBAAOC,KAAK,OACZC,YAAY,wBACZJ,MAAO,CAACK,WAAW,GAAD,OAAKL,IACvBM,QAASJ,EACTK,SAAUN,OCRTO,EAAoB,CAAC,qHAAD,o6BCD7BC,EAAQ,GAERC,EAAgB,GAEhBC,EAAU,GAGVC,EAAO,EAEPC,EAAmB,EAEnBC,EAAgB,IAEhBC,EAAgB,EAIhBC,EAAU,GAGVC,EAAe,GACfC,EAAa,GACbC,EAAU,GACVC,EAAkB,SAClBC,EAAiB,SAGjBC,EAAc,EAGZC,EAAe,SAACC,GAEN,IAARA,GACAP,EAAY,iEACZC,EAAY,cACZC,EAAO,SACO,IAARK,GACNP,EAAY,+DACZC,EAAY,wCACZC,EAAO,SACO,IAARK,GAEFP,EADAK,EAAc,EACF,2CAEA,6BAEhBH,EAAO,gBACO,IAARK,GACNP,EAAY,sLAEZC,EAAY,gBACZC,EAAO,kBACO,IAARK,GACNP,EAAY,qBACZE,EAAO,eACO,IAARK,GACNP,EAAY,uCACZC,EAAY,aACZC,EAAO,WACO,IAARK,GACNP,EAAY,0CACZC,EAAY,cACZC,EAAO,WACM,IAARK,IACLP,EAAY,uBACZC,EAAY,uCACZC,EAAO,YASTM,EAAY,WACd,IAAIC,EAAc,EACU,IAAzBhB,EAAciB,SACbjB,EDlD2B,SAACkB,GAShC,IARA,IAAMC,EAAa,GACfC,EAAYF,EAAcD,OAAU,EACpCI,EAAUF,EAAWF,OACnBK,EAAc,GAChBC,EAAY,EACZC,EAAQ,EACG,IAETH,GAAqB,CAUvB,IARAE,EAAaE,KAAKC,MAAMD,KAAKE,UAAYP,EAAW,EAAI,IAAO,EAE3DD,EAAWF,SAAaC,EAAcD,SACtCW,MAAM,oHACNJ,EAAQ,UACRD,EAAaE,KAAKC,MAAMD,KAAKE,UAAYP,EAAW,EAAI,IAAO,GAG3DE,EAAYO,SAASN,IAA0B,YAAVC,GACzCD,EAAaE,KAAKC,MAAMD,KAAKE,UAAYP,EAAW,EAAI,IAAO,EAGnED,EAAWW,KAAKZ,EAAcK,IAE9BD,EAAYQ,KAAKP,GAEjBF,EAAUF,EAAWF,OAEzB,OAAOE,ECqBaY,CAAoBjC,IAG5B,gBAATI,IACCc,EAAcjB,EAEViB,EADDgB,MAAMhB,GACSA,EAAYC,OAEZgB,OAAOjB,GAEzBf,EAAQ6B,KAAKd,GAEbhB,EAAckC,SAGdlC,EAAciB,OAAS,IACvBT,EAAeR,EAAc,IAGJ,IAAzBA,EAAciB,SACdP,EAAkB,SAClBN,EDrC+B,SAAC+B,GAYpC,IAXA,IAAId,EAAU,EACVe,EAAiB,EACjBC,EAAc,EAGdC,EAAqBH,EAAYlB,OAAU,EAC3CsB,EAAiBd,KAAKC,MAAM,IAAAD,KAAKE,UAA6B,EAC9Da,EAAiBf,KAAKC,MAAM,IAAAD,KAAKE,UAAgC,IACjEc,EAAiBhB,KAAKC,MAAM,GAAAD,KAAKE,UAA4B,EAC7De,EAAiBjB,KAAKC,MAAMD,KAAKE,UAAYW,EAAoB,EAAI,IAAO,EAEzEjB,EAAUc,EAAYlB,QACzBmB,GAAkCD,EAAYd,GAC9CA,GAAoB,EAYxB,IATIgB,EADAD,EAAiB,IACDD,EAAYO,GAAiBF,EAAkBJ,EAAmBK,EAC7EL,EAAiB,GAAKA,EAAiB,IAC5BD,EAAYO,GAAiBH,EAAkBH,EAAmBK,EAElEN,EAAYO,GAAiBH,EAAgBC,EAAkBJ,EAAmBK,EAGtGJ,EAAcZ,KAAKkB,IAAIN,GAEhBA,EAAc,IACjBA,GAA0B,EAK9B,OAFAA,EAAcZ,KAAKmB,MAAMP,IACCQ,WCMNC,CAAwB7C,GAExCE,EAAmB,EACnB4C,IACA7C,EAAO,aAKT8C,EAAe,WACd3C,EAAgB,GACfC,EAAQ2C,QAAQlD,GAEhBO,EAAQ,KAAOF,GACfS,EAAa,GACbX,EAAO,aACPQ,EAAkB,SAClBC,EAAiB,UACVL,EAAQ,KAAOF,GAtGZ,IAsG+BC,GACzCQ,EAAa,GACbX,EAAO,aACPQ,EAAkB,SAClBC,EAAiB,UAKjBH,EAAY,gBADZH,GAAgC,IAWlC0C,EAAoB,WAEO,IAArB5C,EACAU,EAAa,GAGc,IAArBV,IACNU,EAAa,GACbH,EAAmB,WAGvBP,GAAsC,GAIjC+C,EAAa,SAACC,GACvBvC,GAA4B,EAC5BN,EAAU,GACVL,EAAU,GACVD,EAAgB,GAChBK,EAAgB,EAChBK,EAAkB,SACH,YAAXyC,GACAjD,EAAO,EACPS,EAAiB,YAEjBT,EAAO,WACPS,EAAiB,WAOZyC,EAAe,SAACC,GAyBzB,OAxBAtD,EAAQsD,EACK,IAATnD,GACAW,EAAa,GACbX,EAAO,GACQ,IAATA,GACNW,EAAa,GACbF,EAAiB,UACjBT,EAAO,GACQ,IAATA,GACNW,EAAa,GACbH,EAAkB,UAClBK,IACAb,EAAO,eACQ,gBAATA,EACNa,IACMZ,EAAmB,GAAc,aAATD,GAC9B6C,IACAC,KACe,aAAT9C,EACN8C,IACe,aAAT9C,GACNW,EAAa,GAIb,CACIN,EACAC,EACAC,EACAC,EACAC,IC/KG2C,G,wDAtBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,UAAU,GAHA,E,qDAOlB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAE9B,WAEQ,OAAIG,KAAKJ,MAAMC,SAEP,mBAAGK,UAAU,QAAb,oDAIAF,KAAKL,MAAMQ,a,GAnBHC,cCObC,EATC,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,eAC3C,OACI,sBAAKP,UAAU,UAAf,UACI,wBAAQA,UAAU,UAAUlE,QAASsE,EAArC,SAAmDE,IACnD,wBAAQN,UAAU,UAAUxE,MAAO,CAACK,WAAY0E,GAAiBzE,QAASuE,EAA1E,sBCgGGG,G,wDA7FX,aAAc,IAAD,8BACT,gBAmBJC,YAAc,WACwB,YAA/B,EAAKf,MAAM3C,aAAa,IACvBqC,EAAW,WAEf,EAAKW,SAAS,CAAEhD,aAAcuC,EAAa,EAAKI,MAAMzD,UAxB7C,EA0BbyE,SAAW,WACPtB,EAAW,QACX,EAAKW,SAAS,CAAEhD,aAAcuC,EAAa,EAAKI,MAAMzD,UA5B7C,EA+Bb0E,cAAgB,SAACC,GACb,EAAKb,SAAS,CAAE9D,MAAO2E,EAAMC,OAAOC,SAhC3B,EAkCbC,WAAa,SAACH,GACP,EAAKlB,MAAMsB,uBAAyB,EAAKtB,MAAM3C,eAC9C6D,EAAMC,OAAOC,MAAQ,GACrB,EAAKf,SAAS,CAAEiB,qBAAsB,EAAKtB,MAAM3C,iBAlCrD,EAAK2C,MAAQ,CACT3C,aAAc,GACdiE,qBAAsB,GACtB/E,MAAO,IANF,E,qDAUb,WACIgF,WACI,WACInB,KAAKC,SAAS,CAAEhD,aAAcuC,EAAaQ,KAAKJ,MAAMzD,UAEzDiF,KAAKpB,MACN,Q,oBAwBR,WACI,OAAuC,IAAnCA,KAAKJ,MAAM3C,aAAaI,OAEpB,gCACI,oBAAI6C,UAAU,UAAd,2BACA,oBAAIA,UAAU,UAAd,2BAKJ,cAAC,EAAD,UACI,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,UAAf,UACA,oBAAIA,UAAU,UAAd,2BACA,oBAAIA,UAAU,QAAd,wBACA,qBAAKA,UAAU,eAAf,SACI,6BACKF,KAAKJ,MAAM3C,aAAa,OAIjC,sBAAKiD,UAAU,UAAf,UACI,qBAAKA,UAAU,sBAAf,SACCF,KAAKJ,MAAM3C,aAAa,KAGzB,qBAAMiD,UAAU,YAAhB,SACI,cAAC,EAAD,CACAxE,MAAOsE,KAAKJ,MAAM3C,aAAa,GAC/BtB,YAAaqE,KAAKa,cAClBjF,MAAOoE,KAAKiB,eAIZ,cAAC,EAAD,CACAT,KAAMR,KAAKJ,MAAM3C,aAAa,GAC9BqD,YAAaN,KAAKW,YAClBJ,SAAUP,KAAKY,SACfH,eAAgBT,KAAKJ,MAAM3C,aAAa,WAIhD,mCACI,sDACA,2D,GArFVmD,cCGHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f57f5264.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// This function is used to display the input box and respond to different actions performed on it.\r\nconst Input = ({ style, valueChange, reset }) => {\r\n\r\n    return(\r\n        <div>\r\n            <input type=\"text\"\r\n            placeholder='place your input here'\r\n            style={{visibility: `${style}`}}\r\n            onClick={reset}\r\n            onChange={valueChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default Input;","\r\n// This questions_storage is where all questions to be asked are kept.\r\n// The questions are stored as items in an array and the array is the questions_storage.\r\nexport const questions_storage = [\r\n    `If a male is represented by the number 1 and a female is represented by the same, what number will be their child?`,\r\n    `What is your lucky number?`,\r\n    `When do you think the world will end? (give the year)`,\r\n    `Should you: (a)do the right thing or (b)do things right?`,\r\n    `It goes in dry, it comes out wet. the longer it is in, the stronger it gets. What is it?`,\r\n    `What goes up but never comes down?`,\r\n    `Which came first, the chicken or the egg?` ,\r\n    `Which question can you never honestly answer yes to?`,\r\n    `What becomes white when it is dirty?`,\r\n    `What gets wetter the more it dries?`,\r\n    `Hippophobia is the fear of?`,\r\n    `What English word has three consecutive double letters?`,\r\n    `A girl has as many brothers as sisters, but each brother has only half as many brothers as sisters. How children are there in the family?`,\r\n    `If I am holding a bee, what do I have in my eye?`,\r\n    `What is next number in this sequence: 1, 11, 21, 1211, 111221, 312211,`,\r\n    `How many spades are found in the standard deck of cards?`,\r\n    `If I tell you 'I am honestly lying', am I (a)being honest or (b)lying`\r\n];\r\n\r\n// This function takes the list of questions given to it as all_questions then randomly chooses questions and returns them.\r\n//The function is new as it is not found in the python version where sets were chosen.\r\n// If you want the function to choose a certain number questions, just change the q_to_ask variable in the function.\r\n// Please make sure the list of questions given to the function has more questions than the\r\n// number of questions to be randomly chosen; atleast 1 more question.\r\n// If the questions to be chosen exceeds the number of questions given to the function, the function will automatically\r\n// start repeating some of the questions.\r\nexport const questions_generator = (all_questions) => {\r\n    const finalArray = [];\r\n    let q_amount = (all_questions.length) - 1;\r\n    let counter = finalArray.length;\r\n    const old_indexes = [];\r\n    let new_index = 0;\r\n    let limit = 0;\r\n    let q_to_ask = 3;\r\n\r\n    while(counter !== q_to_ask){\r\n        \r\n        new_index = (Math.floor(Math.random() * (q_amount - 0 + 1) ) + 0);\r\n        \r\n        if((finalArray.length) === (all_questions.length)){\r\n            alert(\"Since number of questions to be asked is greater than the number of questions, some questions will be repeated!!\")\r\n            limit = \"reached\";\r\n            new_index = (Math.floor(Math.random() * (q_amount - 0 + 1) ) + 0);\r\n        }\r\n        \r\n        while ((old_indexes.includes(new_index)) && (limit !== \"reached\")){\r\n            new_index = (Math.floor(Math.random() * (q_amount - 0 + 1) ) + 0);\r\n        }\r\n       \r\n        finalArray.push(all_questions[new_index]);\r\n       \r\n        old_indexes.push(new_index);\r\n       \r\n        counter = finalArray.length\r\n    }\r\n    return finalArray;\r\n}\r\n\r\n// This function takes the answers from the user and returns a secret number not greater than 10.\r\n// The parameter of this function only receives an array of numbers(floats, integers etc).\r\nexport const secret_number_generator = (all_answers) => {\r\n    let counter = 0;\r\n    let sum_of_answers = 0;\r\n    let finalNumber = 0;\r\n\r\n    // We -1 since arrays start at zero.\r\n    let number_of_answers = (all_answers.length) - 1;\r\n    let randomNumber1 = (Math.floor(Math.random() * (500 - 0 + 1) ) + 0);\r\n    let randomNumber2 = (Math.floor(Math.random() * (1000 - 500 + 1) ) + 500);\r\n    let randomNumber3 = (Math.floor(Math.random() * (10 - 0 + 1) ) + 0);\r\n    let randomNumber4 = (Math.floor(Math.random() * (number_of_answers - 0 + 1) ) + 0);\r\n\r\n    while (counter < all_answers.length){\r\n        sum_of_answers = sum_of_answers + all_answers[counter]\r\n        counter = counter + 1;\r\n    }\r\n    if (sum_of_answers > 1000){\r\n        finalNumber = ((all_answers[randomNumber4] * randomNumber2) - (sum_of_answers)) + randomNumber3;\r\n    }else if(sum_of_answers > 0 && sum_of_answers < 1000){\r\n        finalNumber = ((all_answers[randomNumber4] * randomNumber1) + (sum_of_answers)) + randomNumber3;\r\n    }else{\r\n        finalNumber = ((all_answers[randomNumber4] * randomNumber1 * randomNumber2) + (sum_of_answers)) + randomNumber3;\r\n    }\r\n    \r\n    finalNumber = Math.abs(finalNumber);\r\n    \r\n    while (finalNumber > 10){\r\n        finalNumber = finalNumber/3;\r\n    }\r\n\r\n    finalNumber = Math.trunc(finalNumber);\r\n    finalNumber = finalNumber.toString();\r\n    return finalNumber;\r\n}","import { questions_storage, questions_generator, secret_number_generator } from './Back-end.js'\r\n\r\nlet input = \"\";\r\n// This array store the questions returned by the question_generator.\r\nlet questions_set = [];\r\n// This array stores the answers that the user inputs and which are passed to the secret_number_generator.\r\nlet answers = [];\r\n// The step is used to control the first two steps in controlling the game.\r\n//It is incremented so that the same step is not repeated.\r\nlet step = 1;\r\n// The step_in_guessing is used to control the different steps when guessing time for user comes.\r\nlet step_in_guessing = 0;\r\n// The secret_number stores the secret number which comes from the secret_number_generator.\r\nlet secret_number = \"0\";\r\n// The guess_counter is always 0. It is used to store the number of guesses the user has input.\r\nlet guess_counter = 0;\r\n// The guess_limit is used to control how many guesses the user can input.\r\nlet guess_limit = 3;\r\n// This store the user guesses. It can be changed but what if the user wants to see their guesses.\r\nlet guesses = [];\r\n\r\n// The 5 variables are used to control what the user sees.\r\nlet instruction1 = \"\";\r\nlet instruction2=\"\";\r\nlet btnText = \"\";\r\nlet inputVisibility = \"hidden\";\r\nlet stopVisibility = \"hidden\";\r\n\r\n// This variable is checked whenever the user restarts the game so as to convey different instructions.\r\nlet timesPlayed = 1;\r\n\r\n//The instruction_sets store the different instructions to be be presented to the user at different levels.\r\nconst instructions = (set) => {\r\n\r\n    if (set === 1){\r\n        instruction1 = `Welcome to my guessing game. To Start, press the START button.`;\r\n        instruction2 = `Press Start`;\r\n        btnText = `Start`;\r\n    }else if (set === 2){\r\n        instruction1 = `How this works is that you have to first answer 3 questions.`;\r\n        instruction2 = `Press \"Begin\" to start the questions.`;\r\n        btnText = `Begin`;\r\n    }else if (set === 3){\r\n        if (timesPlayed > 1){\r\n            instruction1 = `Welcome Back. Answer the questions below`;\r\n        }else{\r\n            instruction1 = `Answer the questions below`;\r\n        }\r\n        btnText = `Enter Answer`;\r\n    }else if (set === 4){\r\n        instruction1 = `Well done! From the answers you have given, a whole number not greater than 10 and also not\r\n        less than 0 is generated. You win by guessing that number. You have 3 guesses.`;\r\n        instruction2 = `Guessing time`;\r\n        btnText = `Start Guessing`;\r\n    }else if (set === 5){\r\n        instruction1 = `Enter your guesses`;\r\n        btnText = `Enter Guess`;\r\n    }else if (set === 6){\r\n        instruction1 = `Congratulations!! The game has ended`;\r\n        instruction2 = `You win :)`;\r\n        btnText = `Restart`;\r\n    }else if (set === 7){\r\n        instruction1 = `Try again next time. The game has ended`;\r\n        instruction2 = `You lose :(`;\r\n        btnText = `Restart`;\r\n    }else if(set === 8){\r\n        instruction1 = `The game has stopped`;\r\n        instruction2 = `To resart, press the restart button.`;\r\n        btnText = `Restart`;\r\n    }\r\n}\r\n\r\n// This function iterates through the random questions generated and asks the\r\n// user those questions while storing their input in the answers array.\r\n// It also checks the different inputs and ensures that the end input to be stored and passed is a number(float, integer). This is\r\n// because the secret_number_generator only accepts number values.\r\n// It then passes the inputs to the secret_number_generator still as an array.\r\nconst run_QandA = () => {\r\n    let user_answer = 0;\r\n    if(questions_set.length === 0){\r\n        questions_set = questions_generator(questions_storage);\r\n    }\r\n    \r\n    if(step === \"questioning\"){\r\n        user_answer = input;\r\n        if(isNaN(user_answer)){\r\n            user_answer = user_answer.length;\r\n        }else{\r\n            user_answer = Number(user_answer)\r\n        }    \r\n        answers.push(user_answer);\r\n        // console.log(questions_set[0] ,answers[(answers.length - 1)]);\r\n        questions_set.shift();\r\n    }\r\n\r\n    if (questions_set.length > 0){\r\n        instruction2 = questions_set[0];\r\n    }\r\n\r\n    if (questions_set.length === 0){\r\n        inputVisibility = \"hidden\";\r\n        secret_number = secret_number_generator(answers);\r\n        // console.log('Secret number: ', secret_number);\r\n        step_in_guessing = 0;\r\n        steps_to_guessing();\r\n        step = \"guessing\";\r\n    }\r\n}\r\n// This function presents the guess number to the user and takes their input.\r\n// It also checks the input so as to convey if they have won, lost or needs to enter the next guess.\r\nconst run_guessing = () => {\r\n    if(guess_counter > 0){\r\n        guesses.unshift(input);\r\n    }\r\n    if (guesses[0] === secret_number){\r\n        instructions(6);\r\n        step = \"restarting\";\r\n        inputVisibility = \"hidden\";\r\n        stopVisibility = \"hidden\";\r\n    }else if ((guesses[0] !== secret_number) && (guess_counter === guess_limit)){\r\n        instructions(7);\r\n        step = \"restarting\";\r\n        inputVisibility = \"hidden\";\r\n        stopVisibility = \"hidden\";\r\n    }else {\r\n        if(guess_counter > 0){\r\n        }\r\n        guess_counter = guess_counter + 1;\r\n        instruction2 = `Guess ${guess_counter}`;\r\n    }\r\n\r\n    // console.log(\"Guesses: \", guesses);\r\n    // console.log(guess_counter);\r\n\r\n}\r\n\r\n// The steps_to_guessing control the different levels the game has to go through so as to reach to the main guessing \r\n// level.\r\nconst steps_to_guessing = () => {\r\n    // This first step presents the instruction for the level to come(guessing).\r\n        if (step_in_guessing === 0){\r\n            instructions(4);\r\n    // This second step is used to present different instructions still for the guessing level.\r\n    // It also make the input box visible again.\r\n        }else if (step_in_guessing === 1){\r\n            instructions(5);\r\n            inputVisibility  = \"visible\";\r\n        }\r\n    \r\n        step_in_guessing = step_in_guessing + 1;\r\n    }\r\n\r\n// This function does as its name states.\r\nexport const game_reset = (choice) => {\r\n    timesPlayed = timesPlayed + 1;\r\n    guesses = [];\r\n    answers = [];\r\n    questions_set = [];\r\n    guess_counter = 0;\r\n    inputVisibility = \"hidden\";\r\n    if (choice === \"restart\"){\r\n        step = 3;\r\n        stopVisibility = \"visible\";\r\n    }else {\r\n        step = \"stopping\";\r\n        stopVisibility = \"hidden\";\r\n    }\r\n}\r\n\r\n// This is the main function of the game.\r\n// Whenever the main control button is clicked. This is the function called.\r\n// It controls all the different levels and steps the user and the game has to go through.\r\nexport const game_control = (user_input) => {\r\n    input = user_input;\r\n    if (step === 1){\r\n        instructions(1);\r\n        step = 2;\r\n    }else if (step === 2){\r\n        instructions(2);\r\n        stopVisibility = \"visible\";\r\n        step = 3;\r\n    }else if (step === 3){\r\n        instructions(3);\r\n        inputVisibility = \"visible\";\r\n        run_QandA();\r\n        step = \"questioning\";\r\n    }else if (step === \"questioning\"){\r\n        run_QandA();\r\n    }else if (step_in_guessing < 2 && step === \"guessing\"){\r\n        steps_to_guessing();\r\n        run_guessing();\r\n    }else if (step === \"guessing\"){\r\n        run_guessing();\r\n    }else if (step === \"stopping\"){\r\n        instructions(8);\r\n    }\r\n\r\n    return(\r\n        [\r\n            instruction1,\r\n            instruction2,\r\n            btnText,\r\n            inputVisibility,\r\n            stopVisibility\r\n        ]\r\n    );\r\n\r\n}\r\n\r\n","import React, { Component} from 'react';\r\nimport './ErrorBoundary.css';\r\n\r\n// Since in production errors in code are not shown to the user, this class is used to catch these erros\r\n// and display that an error has been  found. This is what the user sees.\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true })\r\n    }\r\n    render(){\r\n        \r\n            if (this.state.hasError){\r\n                return (\r\n                    <p className=\"error\"> Ooops! Error Found. Contact Developer</p>\r\n                );\r\n            }\r\n\r\n            return (this.props.children);\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\n// This functions is used to display buttons used in the game.\r\nconst Buttons = ({gamecontrol, gamestop, text, stopvisibility}) => {\r\n    return(\r\n        <div className=\"buttons\">\r\n            <button className=\"mainBtn\" onClick={gamecontrol}>{text}</button>\r\n            <button className=\"stopBtn\" style={{visibility: stopvisibility}} onClick={gamestop}>Stop</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Buttons;","import React, { Component } from 'react';\r\nimport Input from '../Components/InputPlace.js';\r\nimport { game_control, game_reset} from '../game-code/game-control.js';\r\nimport ErrorBoundary from '../Components/ErrorBoundary.js';\r\nimport Buttons from '../Components/Buttons.js';\r\nimport './App.css';\r\n\r\n// We use a class and not a function so as to use state to control the game.\r\n// The App controls the state and passes certain properties to different components of the game.\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n    // Previous Instructions variable is used to for resetting the input box on click.\r\n        this.state = {\r\n            instructions: [],\r\n            previousInstructions: [],\r\n            input: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        setTimeout(\r\n            function() {\r\n                this.setState({ instructions: game_control(this.state.input) });\r\n            }\r\n            .bind(this),\r\n            1500\r\n        );\r\n    }\r\n    \r\n    gameControl = () => {\r\n        if(this.state.instructions[2] === \"Restart\"){\r\n            game_reset('restart');\r\n        }\r\n        this.setState({ instructions: game_control(this.state.input) });\r\n    }\r\n    gameStop = () => {\r\n        game_reset('stop');\r\n        this.setState({ instructions: game_control(this.state.input) });\r\n\r\n    }\r\n    onValueChange = (event) =>{\r\n        this.setState({ input: event.target.value })\r\n    }\r\n    resetInput = (event) =>{\r\n        if(this.state.previousInstructions !== this.state.instructions){\r\n            event.target.value = '';\r\n            this.setState({ previousInstructions: this.state.instructions });\r\n        }\r\n    }\r\n    render(){\r\n        if (this.state.instructions.length === 0){\r\n            return(\r\n                <div>\r\n                    <h1 className=\"heading\">Guessing Game</h1>\r\n                    <h2 className=\"loading\">Loading...</h2>\r\n                </div>\r\n            )\r\n        }else {\r\n            return(\r\n                <ErrorBoundary>\r\n                    <div className=\"body\">\r\n                        <div className=\"console\">\r\n                        <h1 className=\"heading\">Guessing Game</h1>\r\n                        <h3 className=\"motto\">simple fun</h3>\r\n                        <div className=\"instructions\">\r\n                            <h2>\r\n                                {this.state.instructions[0]} \r\n                            </h2>\r\n                        </div>\r\n        \r\n                        <div className=\"control\">\r\n                            <div className=\"controlInstructions\">\r\n                            {this.state.instructions[1]}\r\n                            </div>\r\n        \r\n                            <div  className=\"userInput\">\r\n                                <Input\r\n                                style={this.state.instructions[3]}\r\n                                valueChange={this.onValueChange}\r\n                                reset={this.resetInput}\r\n                                />\r\n                            {/* <input type=\"text\" placeholder='place your input here' style={{visibility: `${this.state.instructions[3]}`}}/> */}\r\n                            </div>\r\n                                <Buttons\r\n                                text={this.state.instructions[2]}\r\n                                gamecontrol={this.gameControl}\r\n                                gamestop={this.gameStop}\r\n                                stopvisibility={this.state.instructions[4]}/>\r\n                        </div>\r\n                        </div>\r\n        \r\n                        <footer>\r\n                            <h3>Game developed by MD</h3>\r\n                            <h5>Version 1.3.5</h5>\r\n                        </footer>\r\n                    </div>\r\n                </ErrorBoundary>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}